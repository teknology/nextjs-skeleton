datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                String            @id @default(cuid())
    image             String?
    username          String?
    email             String            @unique
    emailVerifiedDate DateTime?
    emailVerified     Boolean           @default(false)
    password          String?
    role              UserRole[] // Many-to-many relation with Role
    accounts          Account? // One-to-one relation to Account
    sessions          Session[] // One-to-many relation with Session
    profile           Profile? // One-to-one relation with Profile
    appearance        Appearance? // One-to-one relation with Appearance
    // Optional for WebAuthn support
    Authenticator     Authenticator[] // One-to-many relation with Authenticator
    providers         ProviderAccount[] // One-to-many relation with ProviderAccount

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id           Int                  @id @default(autoincrement()) // Primary key
    userId       String               @unique // Foreign key to User
    localeId     Int? // Foreign key to Locale (optional)
    locale       Locale?              @relation(fields: [localeId], references: [id]) // Relation with Locale
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
    user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    addresses    AccountAddress[] // One-to-many relation with AccountAddress
    accountTypes AccountAccountType[] // Many-to-many relation with AccountType
}

model ProviderAccount {
    id                Int      @id @default(autoincrement())
    userId            String   @unique // Foreign key to User
    provider          String // OAuth provider (e.g., "google", "facebook")
    providerAccountId String // Provider account ID (unique per provider)
    refreshToken      String? // Optional
    accessToken       String? // Optional
    expiresAt         Int? // Optional
    tokenType         String? // Optional
    scope             String? // Optional
    id_token          String?
    session_state     String?
    emailVerified     Boolean?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Locale {
    id       Int    @id @default(autoincrement())
    code     String @unique // Language code (e.g., 'en', 'fr')
    country  String // Country name (e.g., 'United States', 'France')
    language String // Language (e.g., 'English', 'Fran√ßais')
    flag     String // URL of the flag image

    accounts Account[] // One-to-many relation with Account
}

model Profile {
    id            Int          @id @default(autoincrement())
    firstName     String?
    lastName      String?
    title         String?
    biography     String?
    countryCodeId Int? // Optional country code relation field
    phoneNumber   Int? // Optional phone number field
    userId        String       @unique
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    countryCode   CountryCode? @relation(fields: [countryCodeId], references: [id])
    timezoneId    Int?

    @@index([countryCodeId])
}

model Appearance {
    id     Int     @id @default(autoincrement())
    theme  String? @default("light") // 0 = Light, 1 = Dark
    userId String  @unique
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
    id    Int        @id @default(autoincrement())
    name  String     @unique
    users UserRole[]
}

model UserRole {
    id     Int    @id @default(autoincrement())
    userId String
    roleId Int
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model CountryCode {
    id      Int    @id @default(autoincrement())
    code    String
    country String
    alpha2  String
    alpha3  String
    flag    String

    profiles Profile[] // Relation to Profile
}

// Address Model: Stores the actual address details
model Address {
    id        Int              @id @default(autoincrement())
    address1  String
    address2  String?
    city      String
    state     String
    zipcode   String
    country   String
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
    accounts  AccountAddress[]
}

// AccountAddress Join Table: Connects accounts to their addresses with additional info
model AccountAddress {
    id        Int         @id @default(autoincrement())
    accountId Int // Foreign key to Account
    addressId Int // Foreign key to Address
    type      AddressType // Enum for address type (billing, shipping, etc.)
    isPrimary Boolean     @default(false)
    isBilling Boolean     @default(false)
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt

    account Account @relation(fields: [accountId], references: [id])
    address Address @relation(fields: [addressId], references: [id])

    @@unique([accountId, addressId, type]) // Ensure unique combinations of account, address, and type
}

// Many-to-Many Join Table between Account and AccountType
model AccountAccountType {
    id            Int         @id @default(autoincrement())
    accountId     Int // Foreign key to Account
    accountTypeId AccountType // Enum for account type (USER, BUSINESS, PARTNER)
    account       Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)

    @@unique([accountId, accountTypeId]) // Ensure each account type is unique per account
}

// Enum for Account Type (User, Business, Partner)
enum AccountType {
    USER
    BUSINESS
    PARTNER
}

// Enum for Address Type (Home, Business, Billing, Shipping)
enum AddressType {
    HOME
    BUSINESS
    BILLING
    SHIPPING
}
