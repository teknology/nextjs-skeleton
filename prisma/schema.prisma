datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Enum for address types (e.g., Residential, Commercial)
enum AddressTypeEnum {
    RESIDENTIAL
    COMMERCIAL
}

// Enum for website industries (e.g., eCommerce, Doctor, Course, Event)
enum WebsiteTypeEnum {
    ECOMMERCE
    DOCTOR
    EVENT
    COURSE
}

// Enum for website page types
enum PageTypeEnum {
    HOME_PAGE
    PRODUCT_PAGE
    CATEGORY_PAGE
    CART_PAGE
    CHECKOUT_PAGE
    BOOKING_PAGE
    BOOKING_CONFIRMATION_PAGE
    CALENDAR_PAGE
}

// Enum for order status (e.g., Pending, Completed, Canceled, Shipped)
enum OrderStatusEnum {
    PENDING
    COMPLETED
    CANCELED
    SHIPPED
}

// Enum for payment status (e.g., Pending, Completed, Failed)
enum PaymentStatusEnum {
    PENDING
    COMPLETED
    FAILED
}

// Enum for shipping status (e.g., Pending, Shipped, Delivered)
enum ShippingStatusEnum {
    PENDING
    SHIPPED
    DELIVERED
}

// Main model for multi-tenant websites (supporting different industries)
model Website {
    id        String          @id @default(cuid())
    tenantId  String
    tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    name      String
    type      WebsiteTypeEnum // Specifies the website type (eCommerce, Doctor, Event, etc.)
    industry  WebsiteTypeEnum // Industry type for the website
    domain    String? // Optional custom domain for the website
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt

    templates TemplateGroup[] // Industry-specific templates associated with the website

    // eCommerce-specific relationships
    products  Product[] // Products for eCommerce websites
    orders    Order[] // Orders for eCommerce websites
    customers Customer[] // Customers related to eCommerce websites
    cart      Cart[] // Shopping carts for eCommerce websites
    shippings Shipping[] // Shipping information for eCommerce orders

    ProductCategory ProductCategory[]

    UserRole UserRole[]

    Invitation Invitation[]
}

// Template Group model to define industry-specific template sets
model TemplateGroup {
    id        String         @id @default(cuid())
    name      String // Name of the template group (e.g., "eCommerce Template", "Doctor Website Template")
    websiteId String // Associated with a specific website
    website   Website        @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    isDefault Boolean        @default(false) // Whether this is a system default template for the industry
    pages     TemplatePage[] // Pages associated with this template group
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

// Template Page model that represents individual pages in the template group
model TemplatePage {
    id              String            @id @default(cuid())
    templateGroupId String
    templateGroup   TemplateGroup     @relation(fields: [templateGroupId], references: [id], onDelete: Cascade)
    name            String // Name of the page (e.g., "Home Page", "Product Page", etc.)
    type            PageTypeEnum // Enum to define page types
    filePath        String // Stores the file path to the template file in the file system
    isEditable      Boolean           @default(true) // Determines if users can edit this template via Monaco Editor
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    TemplateVersion TemplateVersion[]
}

// Versioning model for template pages (enabling rollback and version control)
model TemplateVersion {
    id             String       @id @default(cuid())
    templatePageId String
    templatePage   TemplatePage @relation(fields: [templatePageId], references: [id], onDelete: Cascade)
    version        Int          @default(1)
    content        String // Stores the versioned content of the template page
    createdAt      DateTime     @default(now())
}

// Multi-tenancy support
model Tenant {
    id       String  @id @default(cuid())
    name     String  @unique // Name of the tenant or business
    slug     String  @unique // Unique identifier or slug for the tenant
    domain   String? // Optional custom domain for the tenant's websites
    industry String? // Optional industry the tenant operates in (e.g., eCommerce, Healthcare)

    // Business Information
    contactEmail String? // Contact email for the business
    phoneNumber  String? // Phone number for the business

    // Subscription & Billing Information
    subscriptionPlan   String? // Current subscription plan (e.g., Free, Premium, Enterprise)
    billingCycle       String? // Billing cycle (e.g., monthly, yearly)
    trialEndsAt        DateTime? // End date for trial period
    subscriptionEndsAt DateTime? // End date for the current subscription

    accountId String // Foreign key for the Account that owns this Tenant
    account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade) // A Tenant belongs to one Account
    websites  Website[] // Websites created under this tenant
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    UserRole UserRole[]

    Invitation Invitation[]
}

// User model tied to tenant
model User {
    id              String            @id @default(cuid())
    tenantId        String?
    image           String?
    username        String?
    password        String?
    role            UserRole[] // Many-to-many relation with Role
    sessions        Session[] // One-to-many relation with Session
    appearance      Appearance? // One-to-one relation with Appearance
    authenticator   Authenticator[] // One-to-many relation with Authenticator
    accounts        Account[] // One-to-many relation with Account
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    provideraccount ProviderAccount[]
    profile         Profile?

    Invitation Invitation[]
}

// Account model tied to tenant
model Account {
    id           String           @id @default(cuid())
    userId       String           @unique
    type         String
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    tenants      Tenant[] // One Account can have multiple Tenants
    accountTypes AccountType[]    @relation("AccountAccountTypes") // Relation with accountTypes
    addresses    AccountAddress[] // Relation to AccountAddress
    localeId     Int? // Foreign key for Locale
    locale       Locale?          @relation(fields: [localeId], references: [id])

    UserRole UserRole[]

    Invitation Invitation[]
}

// eCommerce product model (linked to Website)
model Product {
    id          String   @id @default(cuid())
    websiteId   String // Foreign key to Website
    name        String
    description String?
    price       Float
    currency    String // Currency type (USD, EUR, etc.)
    stock       Int // Inventory stock level
    categoryId  String? // Foreign key to ProductCategory
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    website  Website          @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    category ProductCategory? @relation(fields: [categoryId], references: [id])
    orders   OrderItem[] // Relation to orders that include this product

    CartItem CartItem[]
}

// Product categories (optional, allows for product organization)
model ProductCategory {
    id        String  @id @default(cuid())
    websiteId String // Foreign key to Website
    name      String // Category name
    parentId  String? // Optional parent category for nested categories

    website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)

    Product Product[]
}

// Tracks customer orders, associated with products and a customer
model Order {
    id          String          @id @default(cuid())
    websiteId   String // Foreign key to Website
    customerId  String // Foreign key to Customer
    totalAmount Float // Total order amount
    currency    String // Currency type (USD, EUR, etc.)
    status      OrderStatusEnum // Order status (PENDING, COMPLETED, CANCELED, SHIPPED)
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt

    customer Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    website  Website     @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    items    OrderItem[] // Relation to OrderItem (one-to-many)
    payments Payment[] // Relation to Payment (one-to-many)

    Shipping Shipping[]
}

// Tracks individual products within an order
model OrderItem {
    id        String @id @default(cuid())
    orderId   String // Foreign key to Order
    productId String // Foreign key to Product
    quantity  Int // Quantity of the product ordered
    price     Float // Product price at the time of order
    total     Float // Total cost for this order item

    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Represents customers in an eCommerce website
model Customer {
    id        String   @id @default(cuid())
    websiteId String // Foreign key to Website
    email     String   @unique
    firstName String
    lastName  String
    phone     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    website   Website           @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    addresses CustomerAddress[] // Customer addresses (billing/shipping)
    orders    Order[] // Orders associated with this customer

    Cart Cart[]
}

// Customer addresses for billing and shipping
model CustomerAddress {
    id         String   @id @default(cuid())
    customerId String // Foreign key to Customer
    address1   String
    address2   String?
    city       String
    state      String
    postalCode String
    country    String
    isBilling  Boolean  @default(false) // Indicates if it's a billing address
    isShipping Boolean  @default(false) // Indicates if it's a shipping address
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

// Tracks payments made for orders (linked to Order)
model Payment {
    id        String            @id @default(cuid())
    orderId   String // Foreign key to Order
    amount    Float // Payment amount
    currency  String // Currency type (USD, EUR, etc.)
    status    PaymentStatusEnum // Payment status (PENDING, COMPLETED, FAILED)
    method    String // Payment method (e.g., Credit Card, PayPal)
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

// Tracks shipping information for orders
model Shipping {
    id             String             @id @default(cuid())
    orderId        String // Foreign key to Order
    method         String // Shipping method (e.g., USPS, FedEx)
    status         ShippingStatusEnum // Shipping status (PENDING, SHIPPED, DELIVERED)
    trackingNumber String? // Optional tracking number for shipments
    createdAt      DateTime           @default(now())
    updatedAt      DateTime           @updatedAt

    order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

    Website Website[]
}

// Represents shopping carts for customers (before placing orders)
model Cart {
    id         String   @id @default(cuid())
    websiteId  String // Foreign key to Website
    customerId String // Foreign key to Customer
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    website  Website    @relation(fields: [websiteId], references: [id], onDelete: Cascade)
    customer Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
    items    CartItem[] // Relation to CartItem (one-to-many)
}

// Individual items in the shopping cart
model CartItem {
    id        String @id @default(cuid())
    cartId    String // Foreign key to Cart
    productId String // Foreign key to Product
    quantity  Int // Quantity of the product in the cart

    cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProviderAccount {
    id                String   @id @default(cuid())
    userId            String
    provider          String
    providerAccountId String
    accessToken       String?
    refreshToken      String?
    expiresAt         Int?
    idToken           String?
    scope             String?
    sessionState      String?
    tokenType         String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Profile {
    id                String       @id @default(cuid())
    firstName         String?
    lastName          String?
    title             String?
    biography         String?
    phoneNumber       Int? // Optional phone number field
    userId            String       @unique
    user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    timezoneId        Int?
    countryCodeId     Int? // Optional country code relation field
    countryCode       CountryCode? @relation(fields: [countryCodeId], references: [id])
    email             String       @unique
    emailVerifiedDate DateTime?
    emailVerified     Boolean      @default(false)
}

model AccountType {
    id       String    @id @default(cuid())
    name     String    @unique
    accounts Account[] @relation("AccountAccountTypes")
}

model Locale {
    id       Int       @id @default(autoincrement())
    code     String    @unique // Language code (e.g., 'en', 'fr')
    country  String // Country name (e.g., 'United States', 'France')
    language String // Language (e.g., 'English', 'Français')
    flag     String // URL of the flag image
    accounts Account[] // Relation to Account, moved from Profile
}

model Appearance {
    id     String  @id @default(cuid())
    theme  String? @default("light") // 0 = Light, 1 = Dark
    userId String  @unique
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//Users can belong to tenants, and role-based access control (RBAC) ensures only authorized users can manage and edit templates.
model Role {
    id    String     @id @default(cuid())
    name  String     @unique
    users UserRole[]
}

// UserRole model (Updated)
model UserRole {
    id     String @id @default(cuid())
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    role   Role   @relation(fields: [roleId], references: [id])

    // Add these fields to allow role assignment at the account, tenant, or website level
    accountId String? // Optional foreign key for Account level role
    account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

    tenantId String? // Optional foreign key for Tenant level role
    tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    websiteId String? // Optional foreign key for Website level role
    website   Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)

    @@unique([userId, roleId, accountId, tenantId, websiteId]) // Unique combination to prevent duplicate roles for the same scope
}

// New Invitation model for team invites
model Invitation {
    id        String @id @default(cuid())
    email     String // Email of the person being invited
    roleId    String // The role that is being assigned (Admin, Editor, Viewer, etc.)
    inviterId String // The user who sends the invite
    inviter   User   @relation(fields: [inviterId], references: [id], onDelete: Cascade)

    // Optional foreign keys to specify the level (account, tenant, website)
    accountId String? // If the invite is to manage an Account
    account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)

    tenantId String? // If the invite is to manage a Tenant
    tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    websiteId String? // If the invite is to manage a Website
    website   Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)

    token     String   @unique // Unique token to track the invitation (used in the email invite link)
    status    String   @default("PENDING") // Status of the invitation (PENDING, ACCEPTED, DECLINED)
    createdAt DateTime @default(now())
    expiresAt DateTime // Expiry date of the invitation
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CountryCode {
    id      Int    @id @default(autoincrement())
    code    String
    country String
    alpha2  String
    alpha3  String
    flag    String

    profiles  Profile[] // Relation to Profile
    addresses Address[] // Relation to Address
    states    StateProvince[] // Relation to StateProvince
}

// States/Provinces for address management
model StateProvince {
    id            Int         @id @default(autoincrement())
    name          String
    code          String? // Optional state/province code or abbreviation
    countryCodeId Int // Foreign key to CountryCode
    countryCode   CountryCode @relation(fields: [countryCodeId], references: [id], onDelete: Cascade)
    Address       Address[]
}

// Address management
model Address {
    id              String           @id @default(cuid())
    address1        String
    address2        String?
    city            String
    stateProvinceId Int? // Optional state/province relation field
    stateProvince   StateProvince?   @relation(fields: [stateProvinceId], references: [id])
    zipcode         String
    countryCodeId   Int? // Optional country code relation field
    countryCode     CountryCode?     @relation(fields: [countryCodeId], references: [id])
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    accounts        AccountAddress[] // Relation to AccountAddress
    addressType     AddressTypeEnum // Use AddressTypeEnum instead of a separate model
}

// AccountAddress Join Table: Connects accounts to their addresses
model AccountAddress {
    id        String   @id @default(cuid())
    accountId String //@unique // Foreign key to Account
    addressId String //@unique // Foreign key to Address
    isBilling Boolean  @default(false) // Boolean to indicate if it's a billing address
    isMailing Boolean  @default(false) // Boolean to indicate if it's a mailing address
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   Address  @relation(fields: [addressId], references: [id])
    account   Account  @relation(fields: [accountId], references: [id])

    @@unique([accountId, addressId]) // Ensure unique combinations of account and address
}
