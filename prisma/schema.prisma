datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum AddressTypeEnum {
    RESIDENTIAL
    COMMERCIAL
}

model User {
    id       String  @id @default(cuid())
    image    String?
    username String?

    password      String?
    role          UserRole[] // Many-to-many relation with Role
    sessions      Session[] // One-to-many relation with Session
    appearance    Appearance? // One-to-one relation with Appearance
    authenticator Authenticator[] // One-to-many relation with Authenticator
    accounts      Account[] // One-to-many relation with Account

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    provideraccount ProviderAccount[]
    profile         Profile?
}

model Account {
    id           String           @id @default(cuid())
    userId       String           @unique
    type         String
    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    accountTypes AccountType[]    @relation("AccountAccountTypes") // Relation with accountTypes
    addresses    AccountAddress[] // Relation to AccountAddress
    localeId     Int? // Foreign key for Locale
    locale       Locale?          @relation(fields: [localeId], references: [id]) // Moved from Profile
}

model ProviderAccount {
    id                String   @id @default(cuid())
    userId            String
    provider          String
    providerAccountId String
    accessToken       String?
    refreshToken      String?
    expiresAt         Int?
    idToken           String?
    scope             String?
    sessionState      String?
    tokenType         String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Profile {
    id                String       @id @default(cuid())
    firstName         String?
    lastName          String?
    title             String?
    biography         String?
    phoneNumber       Int? // Optional phone number field
    userId            String       @unique
    user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    timezoneId        Int?
    countryCodeId     Int? // Optional country code relation field
    countryCode       CountryCode? @relation(fields: [countryCodeId], references: [id])
    email             String       @unique
    emailVerifiedDate DateTime?
    emailVerified     Boolean      @default(false)
}

model AccountType {
    id       String    @id @default(cuid())
    name     String    @unique
    accounts Account[] @relation("AccountAccountTypes")
}

model Locale {
    id       Int       @id @default(autoincrement())
    code     String    @unique // Language code (e.g., 'en', 'fr')
    country  String // Country name (e.g., 'United States', 'France')
    language String // Language (e.g., 'English', 'Fran√ßais')
    flag     String // URL of the flag image
    accounts Account[] // Relation to Account, moved from Profile
}

model Appearance {
    id     String  @id @default(cuid())
    theme  String? @default("light") // 0 = Light, 1 = Dark
    userId String  @unique
    user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
    id    String     @id @default(cuid())
    name  String     @unique
    users UserRole[]
}

model UserRole {
    id     String @id @default(cuid())
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model CountryCode {
    id      Int    @id @default(autoincrement())
    code    String
    country String
    alpha2  String
    alpha3  String
    flag    String

    profiles  Profile[] // Relation to Profile
    addresses Address[] // Relation to Address
    states    StateProvince[] // Relation to StateProvince
}

// States/Provinces Model: Stores states or provinces related to countries
model StateProvince {
    id            Int         @id @default(autoincrement())
    name          String
    code          String? // Optional state/province code or abbreviation
    countryCodeId Int // Foreign key to CountryCode
    countryCode   CountryCode @relation(fields: [countryCodeId], references: [id], onDelete: Cascade)

    addresses Address[] // Relation to Address
}

// Address Model: Stores the actual address details
model Address {
    id              String           @id @default(cuid())
    address1        String
    address2        String?
    city            String
    stateProvinceId Int? // Optional state/province relation field
    stateProvince   StateProvince?   @relation(fields: [stateProvinceId], references: [id])
    zipcode         String
    countryCodeId   Int? // Optional country code relation field
    countryCode     CountryCode?     @relation(fields: [countryCodeId], references: [id])
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
    accounts        AccountAddress[] // Relation to AccountAddress
    addressType     AddressTypeEnum // Use AddressTypeEnum instead of a separate model
}

// AccountAddress Join Table: Connects accounts to their addresses
model AccountAddress {
    id        String   @id @default(cuid())
    accountId String // Foreign key to Account
    addressId String // Foreign key to Address
    isBilling Boolean  @default(false) // Boolean to indicate if it's a billing address
    isMailing Boolean  @default(false) // Boolean to indicate if it's a mailing address
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    address   Address  @relation(fields: [addressId], references: [id])
    account   Account  @relation(fields: [accountId], references: [id])

    @@unique([accountId, addressId]) // Ensure unique combinations of account and address
}
